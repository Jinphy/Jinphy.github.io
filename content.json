{"meta":{"title":"原始人","subtitle":"搬砖使我快乐...","description":null,"author":"Jinphy","url":"http://jinphy.github.io"},"pages":[{"title":"关于我","date":"2018-08-17T10:41:05.000Z","updated":"2018-08-28T16:13:52.611Z","comments":true,"path":"about/index.html","permalink":"http://jinphy.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-08-17T10:31:51.000Z","updated":"2018-08-18T12:54:14.948Z","comments":true,"path":"categories/index.html","permalink":"http://jinphy.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-08-30T13:55:43.818Z","updated":"2018-08-30T13:55:43.818Z","comments":true,"path":"custom_config/categories.html","permalink":"http://jinphy.github.io/custom_config/categories.html","excerpt":"","text":"学习 问题"},{"title":"","date":"2018-08-30T13:55:43.819Z","updated":"2018-08-30T13:55:43.819Z","comments":true,"path":"custom_config/tags.html","permalink":"http://jinphy.github.io/custom_config/tags.html","excerpt":"","text":"Java Git IDEA Markdown 算法 Mybatis"},{"title":"tags","date":"2018-08-17T10:23:49.000Z","updated":"2018-08-18T12:54:14.948Z","comments":true,"path":"tags/index.html","permalink":"http://jinphy.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SQL 语法汇总","slug":"sql-syntax","date":"2018-08-30T10:37:00.000Z","updated":"2018-09-02T04:17:12.277Z","comments":true,"path":"2018/08/30/sql-syntax/","link":"","permalink":"http://jinphy.github.io/2018/08/30/sql-syntax/","excerpt":"最近更新：2018-8-31 11:06 本篇文章介绍SQL的常用语法","text":"最近更新：2018-8-31 11:06 本篇文章介绍SQL的常用语法 创建表123456create table `a` ( `id` bigint(20) not null AUTO_INCREMENT COMMENT '主键,自增id', `name` int(4) not null default '0' COMMENT '名称', primary key (`id`), unique key `unique_key` (`name`)) ENGINE=InnoDB AUTO_INCREMENT=0 default CHARSET=utf8 COMMENT='一张表'; 删除表1drop table a 重命名表1alter table oldname rename to newname","categories":[{"name":"学习","slug":"学习","permalink":"http://jinphy.github.io/categories/学习/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://jinphy.github.io/tags/SQL/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"http://jinphy.github.io/categories/学习/"}]},{"title":"IDEA 常见问题","slug":"idea-problem","date":"2018-08-29T07:01:26.000Z","updated":"2018-09-02T04:17:12.251Z","comments":true,"path":"2018/08/29/idea-problem/","link":"","permalink":"http://jinphy.github.io/2018/08/29/idea-problem/","excerpt":"最近更新：2018-8-31 11:06 本篇文章介绍在使用IDEA过程中遇到的一些问题及其解决方法","text":"最近更新：2018-8-31 11:06 本篇文章介绍在使用IDEA过程中遇到的一些问题及其解决方法 一、Mybatis配置文件中SQL语句的波浪线问题问题描述在XXXMapper.xml文件中，SQL语句总是出现很多波浪线，很碍眼，如图： 解决方案打开设置，如下图： 效果修改后的效果如下图： 二、Maven项目找不到类问题描述 场景：由于要开发功能fun这个需求，然后从远程仓库master中拉取了最新的代码到本地分支fun。这是fun的代码与master是相同的，项目中依赖于公司其他的项目模块libA。此时项目是正常运行的 问题：在代码开发一段时间后，需要同步master的代码到本地以便继续开发，此时master的代码是有更新的，具体是，master分支的代码上依赖的libA也更新了，并增加了一个类，例如User，然后master上的代码使用了这个类，值得一提的是由于libA的代码还未开发完整，所以版本号没有更新，所以master上对libA的依赖的版本号也是不变（这里master能够用User，估计也是使用了下面介绍的方法的）。所以现在fun分支上的代码已经同步到master的最新代码，这时候就有问题了，fun分支上会报找不到User的错 ，这是为什么？以为libA的版本号没有更新，所以fun上的代码并不会去更新libA的最新依赖，所以fun本地上的代码确实是找不到User这个类的，你会发现无论如何Build Project都没用，刷新Maven也没有用，因为libA的版本号没有更新，所以Maven仓库不会下载最新的libA 解决方案如何解决？通过手动使用命令行解决，在终端执行如下命令（确保在项目跟目录下）1mvn clean package 三、未完待续","categories":[{"name":"问题","slug":"问题","permalink":"http://jinphy.github.io/categories/问题/"}],"tags":[{"name":"IDEA","slug":"IDEA","permalink":"http://jinphy.github.io/tags/IDEA/"},{"name":"Mybatis","slug":"Mybatis","permalink":"http://jinphy.github.io/tags/Mybatis/"},{"name":"Maven","slug":"Maven","permalink":"http://jinphy.github.io/tags/Maven/"}],"keywords":[{"name":"问题","slug":"问题","permalink":"http://jinphy.github.io/categories/问题/"}]},{"title":"常用算法分析 & 实现","slug":"algorithm-analyze","date":"2018-08-29T02:45:00.000Z","updated":"2018-09-02T04:17:12.240Z","comments":true,"path":"2018/08/29/algorithm-analyze/","link":"","permalink":"http://jinphy.github.io/2018/08/29/algorithm-analyze/","excerpt":"最近更新：2018-8-31 11:06 本篇文章介绍的是平时使用的比较多的并且必须掌握的各种算法","text":"最近更新：2018-8-31 11:06 本篇文章介绍的是平时使用的比较多的并且必须掌握的各种算法 一、排序算法排序就是将一组可比较大小的数据集合按从小到大（升序）或者从大到小（降序）的方式重新组织。排序算法是用来对数据进行排序的工具，所以工欲善其事，必先利其器。今天，排序算法的种类是很多的，有简单的泡泡排序、选择排序、插入排序，还有复杂一些的归并排序、希尔排序、快速排序等。下面我们就来看看这些算法 冒泡排序冒泡排序可以说是众多排序算法中最简单的一种排序算法。原理很简单，顾名思义，这种算法就像水中的泡泡一样，在排序的过程中，数组中的元素不断的网上冒，直到所有的泡泡都冒完了。算法有如下几点： 1. 在冒泡的过程中，每次冒泡一个，即每次把当前未排序的元素的最大值（升序）放到当前待排序数组的最后 2. 元素个数为 n 的数组，总共需要冒泡 n-1 次，即要排序 n-1 趟 3. 已经排序过（冒泡）的元素不参与以后每趟的排序12345678910111213141516// 冒泡排序public class BubbleSort&#123; public void sort(int...nums)&#123; // 排序n-1趟 for(int i=1; i&lt;nums.length; i++)&#123; // 进行第i趟排序 for(int j=0; j&lt;nums.length-i;j++)&#123; if(nums[j] &gt; nums[j+1])&#123; int tmp = nums[j]; nums[j] = nums[j+1]; nums[j+1] = tmp; &#125; &#125; &#125; &#125;&#125; 选择排序选择排序与冒泡排序有点类似，但是有不像冒泡排序一样，每次都要两两比较，然后再互相交换。选择排序的原理是每次选择时都在待排序的数组中选择一个最小值（升序排序），或者一个最大值（降序排序），然后把该值与当前待排序数组的第一个元素交换。所以每次选择一个最值，在长度为n的数组中，共需要选择n-1次选择排序有如下几步：1. 长度为n的数组共需要选择n-1次2. 每次选择一个最小值（升序排序）3. 把选出来的值与当前待排序数组的第一个元素互换123456789101112131415161718192021// 选择排序public class ChooseSort&#123; public void sort(int... nums)&#123; // 选择排序 n-1 次 for (int i=1; i&lt;nums.length; i++)&#123; int current = i-1; int minIndex = current; // 进行第i次选择 for (int j = i; j&lt;nums.length; j++)&#123; if (nums[j]&lt;nums[minIndex])&#123; minIndex = j; &#125; &#125; if(minIndex!=current)&#123; int tmp = nums[minIndex]; nums[minIndex] = nums[current]; nums[current] = tmp; &#125; &#125; &#125;&#125; 插入排序 归并排序 希尔排序 快速排序","categories":[{"name":"学习","slug":"学习","permalink":"http://jinphy.github.io/categories/学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jinphy.github.io/tags/Java/"},{"name":"算法","slug":"算法","permalink":"http://jinphy.github.io/tags/算法/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"http://jinphy.github.io/categories/学习/"}]},{"title":"Jetbrains系列产品永久免费破解教程","slug":"idea-tutorial","date":"2018-08-22T02:47:17.000Z","updated":"2018-09-02T06:04:07.096Z","comments":true,"path":"2018/08/22/idea-tutorial/","link":"","permalink":"http://jinphy.github.io/2018/08/22/idea-tutorial/","excerpt":"最近更新：2018-9-2 14:06 本篇文章介绍 Jetbrains 系列产品的永久免费破解方法，亲测可行版本为2018.2.2及以下版本，已经验证可行的有IDEA和WebStorm。下面以IDEA为例，进行介绍","text":"最近更新：2018-9-2 14:06 本篇文章介绍 Jetbrains 系列产品的永久免费破解方法，亲测可行版本为2018.2.2及以下版本，已经验证可行的有IDEA和WebStorm。下面以IDEA为例，进行介绍 下载并安装IDEA 到官网去下载：点击这里 下载破解补丁 途径一点击这里直接下载 途径二点击这里到lanyus网站下载 &nbsp;&nbsp;如下图： 注： 把下载好的补丁文件放到IDEA的安装目录下的bin文件夹中 配置补丁文件的路径 Mac 环境修改 [安装目录]]/bin 目录下的idea.vmoptions文件，在末尾添加如下一行配置： 123-javaagent:/Applications/IntelliJ IDEA.app/Contents/bin/[补丁文件名]或：-javaagent:../bin/[补丁文件名] Windows 环境修改 [安装目录]]/bin 目录下的idea.exe.vmoptions 和 idea64.exe.vmoptions文件，分别在末尾添加如下一行配置： 1-javaagent:[安装目录]/bin/[补丁文件名] 修改hosts文件在 hosts 文件末尾添加如下一行配置: 10.0.0.0 account.jetbrains.com 注： host 文件在哪里？ Mac环境：/etc/hosts Win环境：C:\\Windows\\System32\\drivers\\etc\\hosts 激活IDEA 经过以上配置后，打开IDEA，在激活界面选择Activation code 激活方式，输入任意信息即可激活。 但是如果你想激活信息里有你的自己的信息则可以将以下json格式文本拷贝到激活码输入框即可： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123;\"licenseId\":\"ThisCrackLicenseId\",\"licenseeName\":\"Your Name\",\"assigneeName\":\"Your Name\",\"assigneeEmail\":\"Your Email\",\"licenseRestriction\":\"Thanks Rover12421 Crack\",\"checkConcurrentUse\":false,\"products\":[&#123;\"code\":\"II\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"DM\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"AC\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"RS0\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"WS\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"DPN\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"RC\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"PS\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"DC\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"RM\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"CL\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"PC\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"DB\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"GO\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"RD\",\"paidUpTo\":\"2099-12-31\"&#125;],\"hash\":\"2911276/0\",\"gracePeriodDays\":7,\"autoProlongated\":false&#125;","categories":[{"name":"问题","slug":"问题","permalink":"http://jinphy.github.io/categories/问题/"}],"tags":[{"name":"IDEA","slug":"IDEA","permalink":"http://jinphy.github.io/tags/IDEA/"},{"name":"WebStorm","slug":"WebStorm","permalink":"http://jinphy.github.io/tags/WebStorm/"},{"name":"Jetbrains","slug":"Jetbrains","permalink":"http://jinphy.github.io/tags/Jetbrains/"}],"keywords":[{"name":"问题","slug":"问题","permalink":"http://jinphy.github.io/categories/问题/"}]},{"title":"Markdown 使用整理","slug":"markkdown-skill","date":"2018-08-19T03:35:04.000Z","updated":"2018-09-02T04:17:12.273Z","comments":true,"path":"2018/08/19/markkdown-skill/","link":"","permalink":"http://jinphy.github.io/2018/08/19/markkdown-skill/","excerpt":"最近更新：2018-8-31 11:06 &ensp; &ensp; 本篇文章主要讲 Markdown 的使用，是平时使用的积累记录，方便在使用时查找","text":"最近更新：2018-8-31 11:06 &ensp; &ensp; 本篇文章主要讲 Markdown 的使用，是平时使用的积累记录，方便在使用时查找 一、特殊字符空格12345&amp;ensp;或&amp;emsp;或&amp;nbsp; 小于号： &lt;1&amp;lt; 大于号： &gt;1&amp;gt; 与号： &amp;1&amp;amp; 双引号： &quot;1&amp;quot; 单引号(IE 不支持）： &#39;1&amp;apos; 二、添加注释方法一1&lt;!-- 这里是注释掉的内容，不会在页面显示 --&gt; 方法二1[//]: &lt;&gt; (这里是注释掉的内容，不会在页面显示) 三、字体设置Markdown 本身不支持字体的设置，但是可以使用HTML的标记语法来进行设置 设置字体颜色1&lt;font color= red &gt;内容&lt;/font&gt; 设置字体大小size可以设置的范围是1～7；浏览器默认值是31&lt;font size= 5 &gt;内容&lt;font&gt; 设置字体样式1&lt;font face=\"黑体\"&gt;内容&lt;/font&gt; 四、列表无序列表使用[+|-|*]+.+[空格]+[列表项] 演示：123+ 北京- 深圳* 上海 效果： 北京 上海 深圳 有序列表使用数字+.+[空格]+[列表项]，页面显示的数字将基于第一个递增，所以为了方便，数字都与第一个保持一致即可 演示：1233. 北京1. 深圳19. 上海 效果： 北京 上海 深圳 五、在Hexo中的变量引用../_config.yml在 hexo 跟目录下的配置文件 _config.yml 中自定义变量12# 声明变量count=10，在markdown文件中引用：config.countcount: 10 ../themes/_config.yml在某个主题 （theme）目录下的配置文件 _config.yml 中自定义变量12# 声明变量count=10，在markdown文件中引用：theme.countcount: 10 六、插入链接第一种，直接插入12# 直接在`百度`中插入链接[百度](http://www.baidu.com) 第二种，引用变量1234# 先声明变量 baidu_url[baidu_url]: http://www.baidu.com# 再把变量`baidu_url` 用到 ’百度‘ 中[百度][baidu_url] 七、插入图片使用绝对路径1234# 图片资源位于：source／images/image.jpg![img](/images/image.jpg)# 注：这里也可以使用类似于 '插入链接' 中第二种方法那样引用变量的方式 使用相对路径12345678# 第一步，确保在 hexo 的根目录下的 _config.yml 文件中的post_asset_folder属性为truepost_asset_folder: true# 执行以下命令，Hexo 将会在source／_posts 文件夹下生成file_name.md和对应名字的文件夹，并将要该文件中要用到的图片都放在该文件夹下。例如 image.jpn$ hexo new file_name# 最后就是插入图片，图片位置：source/_posts/file_new/image.jpg![img1](image.jpg) 建议： 将只属于某个页面的图片资源放在其对应的文件夹下，将通用的图片资源放在 source/images/ 文件夹下 八、未完待续","categories":[{"name":"学习","slug":"学习","permalink":"http://jinphy.github.io/categories/学习/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://jinphy.github.io/tags/Markdown/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"http://jinphy.github.io/categories/学习/"}]},{"title":"Git命令整理","slug":"command-of-git","date":"2018-08-18T03:48:07.000Z","updated":"2018-09-02T04:17:12.245Z","comments":true,"path":"2018/08/18/command-of-git/","link":"","permalink":"http://jinphy.github.io/2018/08/18/command-of-git/","excerpt":"最近更新：2018-8-31 11:06 这篇文章主要记录的是关于 Git 的一些常用的命令，当一些命令太久没有使用忘记时可以在这里重新学习！ 下载 Git 请点击这里","text":"最近更新：2018-8-31 11:06 这篇文章主要记录的是关于 Git 的一些常用的命令，当一些命令太久没有使用忘记时可以在这里重新学习！ 下载 Git 请点击这里 查看版本号1$ git -version 查看用于名和邮箱12$ git config --global user.name$ git config --global user.email 设置用户名和邮箱12$ git config --global user.name \"Your name\"$ git config --global user.email \"your email address\" 查看用户是否已经有 ssh 密钥进入用户名录1$ cd ~ 查看是否有 .ssh 目录1$ ls -a 如果有.ssh 目录，并且确定不是自己生成的，则把该目录删掉1$ rm -rf .ssh 生成用户 ssh 密钥创建 .ssh 目录1$ mkdir .ssh 创建 .ssh key ，输入以下命令，并一直按 Enter 键，直到完成创建1$ ssh-keygen -t rsa -C \"Your email address\" 查看生成的 .ssh 目录的内容12$ cd .ssh$ ls 使用生成的 ssh key在 .ssh 目录下，使用如下命令打开 id_rsa.pub 文件1$ cat id_rsa.pub 复制 id_rsa.pub 文件中的内容，将该公钥添加到代码托管平台中就可以使用 Git了。常用的代码托管平台有国外的 GitHub 和国内的 Gitee GitHub: 是使用最为广泛的的远程代码托管平台之一，是国外的，但是一般情况下你的代码在上面都是公开的，谁都可以查看和下载，除非你向该平台定期缴纳费用 Gitee: 又叫 码云 是国内比较有名的远程代码托管平台之一，在该平台上你可以免费地设置你的代码是否公开或私有，如果你希望你的某些代码不被别人看到可以考虑使用该平台 创建本地代码仓库 打开终端，使用如下命令进入需要创建项目的目录 1$ cd [target path] 创建项目跟目录并进入建好的项目跟目录 12$ mkdir [Project Name]$ cd [Project Name] 查看项目的绝对路径 1$ pwd 创建仓库 1$ git init 从远程仓库中直接拉取（克隆）项目到本地直接克隆 123$ git clone git@github.com:Jinphy/GitHubProject.git （GitHub平台）或$ git clone git@gitee.com:Jinphy/GiteeProject.git（Gitee平台） 克隆到指定目录 1$ git clone git@github.com:Jinphy/gitHubProject.git [folder] 注： 以上只列举了 GitHub 和 Gitee 两个平台的远程仓库，其他远程仓库的用法于此类似 拉取远程分支到本地将远程分支 dev 拉到本地，只拉取不检出，即拉取前在哪个分支，拉取后还在哪个分支1$ git fetch origin dev 注： fetch 命令与 pull 不同 ，后者是把指定的远程分支拉到本地当前HEAD所在的分支上而不会在本地新建一个新的同名分支 拉取远程分支并检出到该分支将远程分支 dev 拉到本地并把HEAD切换到该分支1$ git checkout -b dev（本地分支） origin/dev(远程分支) 指令：remote 前提 本地：有一个项目叫 GiteeProject 远程：在 Gitee 平台上有个个项目叫GiteeProject(http://gitee.com/JinphyGiteeProject) 关联本地仓库到远程 1$ git remote add gitee git@gitee.com:Jinphy/GiteeProject.git 注： 上面中的 gitee 可以自己命名，它时远程仓库在本地中的一个名称，叫什么不会对远程仓库有任何影响 如果远程仓库时 GitHub ，则上面的命令中的 gitee.com 可以改成 github.com 查看本地项目关联远程仓库的情况，将会显示所有关联的远程仓库及其读写权限 123$ git remote -v或$ git remote -verbose 解除与某个远程仓库的关联 123$ git remote rm gitee或$ git remote remove gitee 注： 上面的 gitee 是远程仓库在本地关联的名字 更改远程分支在本地中的名字 1$ git remote rename [old_name] [new_name] 注： 例如从远程仓库中 clone 下来的项目在本地的默认分支的名字是 origin ，现在如果这个远程仓库是GitHub上面的，则可以改成 github；如果是Gitee上面的，则可以改成 gitee 指令：checkout检出本地已有分支1$ git checkout [branch_name] 从当前分支中检出新的分支，并把 HEAD 指向该新分支1$ git checkout -b [new_branch_name] 从当前分支检出到新分支，并进行3路合并1$ git checkout -m [branch_name] 注： 所谓3路合并就是将当前分支（修改前的）、当前分支（修改后但是还未提交的）以及新检出的分支进行合并，并将合并结果更新到新检出的分支中。值得注意的是，新检出的分支的提交状态与旧分支的提交状态一致（即如果旧分支是未提交的则新检出的分支也是未提交的），最后旧分支的状态将回到最后一次提交后（修改前）的状态 从当前分支检出新的分支，并放弃所有修改但未提交的内容1$ git checkout -f [branch_name] 注： 执行该命令后，相当于放弃在之前分支修改但未提交的所有内容，旧分支的状态将回到最后一次提交后修改前的状态。 指令：branch查看本地分支1$ git branchr 查看远程分支123$ git branch -r或$ git branch --remoter 查看所有分支（本地、远程123$ git branch -a或$ git branch --all 查看分支，并带有最后一次提交的信息123$ git branch -v或$ git branch -verbose 删除已经完全合并后的分支1$ git branch -d 注： 执行该命令只能删除完全合并后的分支，即只有在当前分支的所有修改提交都被合并到其他分支上之后才能删除，否则删除不成功，并提示你该分支的修改提交还没有被合并，所以该操作是安全的 强制删除指定分支1$ git branch -D 注： 该指令执行后指定的分支将会被删除，即使该分支有修改提交未被合并到其他分支上，所以该指令要慎用，一般情况请使用上面一条指令 指令：add**将某个新增或修改后的文件添加到仓库索引中1$ git add [file_name] 将所有新增或修改后的文件添加到索引中1$ git add . 注： . 是一个通配符，匹配所有文件，也可以根据需求只匹配一部分的文件。例如，将 . 换成 *.s 时，将匹配所有文件名以 .s 结尾的文件","categories":[{"name":"学习","slug":"学习","permalink":"http://jinphy.github.io/categories/学习/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://jinphy.github.io/tags/Git/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"http://jinphy.github.io/categories/学习/"}]}]}